<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Tklesson Premium</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <style>
        :root {
            --primary: #6366f1;
            --primary-dark: #4f46e5;
            --primary-light: #818cf8;
            --secondary: #8b5cf6;
            --success: #10b981;
            --success-dark: #059669;
            --warning: #f59e0b;
            --warning-dark: #d97706;
            --accent: #ef4444;
            --accent-dark: #dc2626;
            --gray-50: #f9fafb;
            --gray-100: #f3f4f6;
            --gray-200: #e5e7eb;
            --gray-300: #d1d5db;
            --gray-400: #9ca3af;
            --gray-500: #6b7280;
            --gray-600: #4b5563;
            --gray-700: #374151;
            --gray-800: #1f2937;
            --gray-900: #111827;
            
            --sidebar-width: 280px;
            --header-height: 80px;
            --border-radius: 16px;
            --border-radius-sm: 12px;
            --border-radius-lg: 20px;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-md: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --shadow-xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            --transition-fast: all 0.15s cubic-bezier(0.4, 0, 0.2, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: var(--gray-700);
            line-height: 1.6;
        }

        .admin-container {
            display: flex;
            min-height: 100vh;
        }

        /* ===== SIDEBAR ===== */
        .admin-sidebar {
            width: var(--sidebar-width);
            background: linear-gradient(180deg, var(--gray-900) 0%, var(--gray-800) 100%);
            color: white;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            z-index: 1000;
            transition: var(--transition);
            border-right: 1px solid var(--gray-700);
        }

        .sidebar-header {
            padding: 2rem 1.5rem 1.5rem;
            border-bottom: 1px solid var(--gray-700);
            background: rgba(255, 255, 255, 0.05);
        }

        .admin-logo {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 0.5rem;
        }

        .admin-logo i {
            font-size: 1.75rem;
            color: var(--primary-light);
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .admin-logo h1 {
            font-size: 1.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #fff, var(--gray-300));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .admin-subtitle {
            color: var(--gray-400);
            font-size: 0.875rem;
            font-weight: 500;
        }

        .admin-nav {
            padding: 1.5rem;
        }

        .nav-section {
            margin-bottom: 2rem;
        }

        .nav-title {
            color: var(--gray-400);
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-bottom: 1rem;
            padding-left: 0.5rem;
        }

        .nav-links {
            list-style: none;
        }

        .nav-links li {
            margin-bottom: 0.5rem;
        }

        .nav-links a {
            display: flex;
            align-items: center;
            padding: 0.875rem 1rem;
            color: var(--gray-300);
            text-decoration: none;
            border-radius: var(--border-radius-sm);
            transition: var(--transition-fast);
            font-weight: 500;
            position: relative;
            overflow: hidden;
        }

        .nav-links a::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            height: 100%;
            width: 3px;
            background: var(--primary);
            transform: scaleY(0);
            transition: var(--transition-fast);
        }

        .nav-links a:hover {
            background: rgba(255, 255, 255, 0.05);
            color: white;
            transform: translateX(4px);
        }

        .nav-links a:hover::before {
            transform: scaleY(1);
        }

        .nav-links a.active {
            background: linear-gradient(135deg, rgba(99, 102, 241, 0.15), rgba(139, 92, 246, 0.1));
            color: white;
            box-shadow: var(--shadow-sm);
        }

        .nav-links a.active::before {
            transform: scaleY(1);
        }

        .nav-links i {
            margin-right: 0.75rem;
            width: 20px;
            text-align: center;
            font-size: 1.125rem;
        }

        .nav-links a.active i {
            color: var(--primary-light);
        }

        /* ===== MAIN CONTENT ===== */
        .admin-main {
            flex: 1;
            margin-left: var(--sidebar-width);
            background: var(--gray-50);
            min-height: 100vh;
        }

        .admin-header {
            height: var(--header-height);
            background: white;
            border-bottom: 1px solid var(--gray-200);
            padding: 0 2rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: var(--shadow-sm);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-left h1 {
            font-size: 1.75rem;
            font-weight: 700;
            color: var(--gray-900);
            background: linear-gradient(135deg, var(--gray-900), var(--gray-700));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        .admin-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 0.5rem 1rem;
            background: var(--gray-50);
            border-radius: var(--border-radius);
            border: 1px solid var(--gray-200);
        }

        .admin-avatar {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 1rem;
        }

        .admin-details {
            display: flex;
            flex-direction: column;
        }

        .admin-name {
            font-weight: 600;
            color: var(--gray-900);
            font-size: 0.875rem;
        }

        .admin-role {
            font-size: 0.75rem;
            color: var(--gray-500);
            font-weight: 500;
        }

        /* ===== BUTTONS ===== */
        .btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: var(--border-radius-sm);
            font-weight: 600;
            font-size: 0.875rem;
            cursor: pointer;
            transition: var(--transition-fast);
            text-decoration: none;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: var(--transition);
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            box-shadow: var(--shadow);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .btn-outline {
            background: transparent;
            border: 2px solid var(--gray-300);
            color: var(--gray-700);
        }

        .btn-outline:hover {
            border-color: var(--primary);
            color: var(--primary);
            transform: translateY(-1px);
        }

        .btn-success {
            background: linear-gradient(135deg, var(--success), var(--success-dark));
            color: white;
            box-shadow: var(--shadow);
        }

        .btn-danger {
            background: linear-gradient(135deg, var(--accent), var(--accent-dark));
            color: white;
            box-shadow: var(--shadow);
        }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.75rem;
        }

        .btn-icon {
            padding: 0.5rem;
            width: 36px;
            height: 36px;
            justify-content: center;
        }

        /* ===== CONTENT SECTIONS ===== */
        .content-area {
            padding: 2rem;
        }

        .content-section {
            display: none;
            animation: fadeIn 0.5s ease-in-out;
        }

        .content-section.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* ===== STATS GRID ===== */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 2rem;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            border: 1px solid var(--gray-200);
            position: relative;
            overflow: hidden;
            transition: var(--transition);
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

        .stat-card.success::before {
            background: linear-gradient(135deg, var(--success), var(--success-dark));
        }

        .stat-card.warning::before {
            background: linear-gradient(135deg, var(--warning), var(--warning-dark));
        }

        .stat-card.accent::before {
            background: linear-gradient(135deg, var(--accent), var(--accent-dark));
        }

        .stat-header {
            display: flex;
            align-items: center;
            justify-content: between;
            margin-bottom: 1rem;
        }

        .stat-icon {
            width: 48px;
            height: 48px;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            background: linear-gradient(135deg, var(--primary-light), var(--primary));
            color: white;
        }

        .stat-card.success .stat-icon {
            background: linear-gradient(135deg, var(--success), var(--success-dark));
        }

        .stat-card.warning .stat-icon {
            background: linear-gradient(135deg, var(--warning), var(--warning-dark));
        }

        .stat-card.accent .stat-icon {
            background: linear-gradient(135deg, var(--accent), var(--accent-dark));
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: 800;
            color: var(--gray-900);
            line-height: 1;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: var(--gray-600);
            font-size: 0.875rem;
            font-weight: 500;
        }

        .stat-trend {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.75rem;
            font-weight: 600;
            margin-top: 0.5rem;
        }

        .trend-up {
            color: var(--success);
        }

        .trend-down {
            color: var(--accent);
        }

        /* ===== CARDS ===== */
        .card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            border: 1px solid var(--gray-200);
            overflow: hidden;
            transition: var(--transition);
        }

        .card:hover {
            box-shadow: var(--shadow-md);
        }

        .card-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--gray-200);
            background: var(--gray-50);
        }

        .card-header h2 {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--gray-900);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .card-body {
            padding: 1.5rem;
        }

        /* ===== TABLES ===== */
        .table-container {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            overflow: hidden;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
        }

        .data-table th {
            background: var(--gray-50);
            padding: 1rem 1.5rem;
            text-align: left;
            font-weight: 600;
            color: var(--gray-700);
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            border-bottom: 1px solid var(--gray-200);
        }

        .data-table td {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--gray-200);
            color: var(--gray-700);
        }

        .data-table tr:last-child td {
            border-bottom: none;
        }

        .data-table tr:hover {
            background: var(--gray-50);
        }

        /* ===== BADGES ===== */
        .badge {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .badge-success {
            background: var(--success);
            color: white;
        }

        .badge-warning {
            background: var(--warning);
            color: white;
        }

        .badge-accent {
            background: var(--accent);
            color: white;
        }

        .badge-primary {
            background: var(--primary);
            color: white;
        }

        /* ===== FORMS ===== */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--gray-700);
        }

        .form-control {
            width: 100%;
            padding: 0.875rem 1rem;
            border: 2px solid var(--gray-300);
            border-radius: var(--border-radius-sm);
            font-size: 1rem;
            transition: var(--transition-fast);
            background: white;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }

        /* ===== LOADING STATES ===== */
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 3rem;
            color: var(--gray-500);
            font-size: 0.875rem;
        }

        .loading i {
            margin-right: 0.5rem;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        /* ===== GRID LAYOUTS ===== */
        .grid-2 {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }

        .grid-3 {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 1.5rem;
        }

        /* ===== RESPONSIVE ===== */
        @media (max-width: 1200px) {
            .grid-3 {
                grid-template-columns: 1fr 1fr;
            }
        }

        @media (max-width: 1024px) {
            .admin-sidebar {
                transform: translateX(-100%);
            }
            
            .admin-sidebar.open {
                transform: translateX(0);
            }
            
            .admin-main {
                margin-left: 0;
            }
            
            .mobile-menu-btn {
                display: block;
            }
        }

        @media (max-width: 768px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .grid-2, .grid-3 {
                grid-template-columns: 1fr;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .admin-header {
                padding: 0 1rem;
            }
            
            .content-area {
                padding: 1rem;
            }
            
            .header-right {
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="admin-container">
        <!-- Sidebar -->
        <nav class="admin-sidebar">
            <div class="sidebar-header">
                <div class="admin-logo">
                    <i class="fas fa-crown"></i>
                    <h1>Admin Panel</h1>
                </div>
                <div class="admin-subtitle">Tklesson Premium Management</div>
            </div>
            
            <div class="admin-nav">
                <div class="nav-section">
                    <div class="nav-title">Dashboard</div>
                    <ul class="nav-links">
                        <li><a href="#" class="active" onclick="showSection('overview')"><i class="fas fa-chart-bar"></i> Overview</a></li>
                        <li><a href="#" onclick="showSection('analytics')"><i class="fas fa-chart-line"></i> Performance Analytics</a></li>
                    </ul>
                </div>
                
                <div class="nav-section">
                    <div class="nav-title">Management</div>
                    <ul class="nav-links">
                        <li><a href="#" onclick="showSection('users')"><i class="fas fa-users"></i> User Management</a></li>
                        <li><a href="#" onclick="showSection('courses')"><i class="fas fa-book"></i> Course Management</a></li>
                    </ul>
                </div>
                
                <div class="nav-section">
                    <div class="nav-title">Reports</div>
                    <ul class="nav-links">
                        <li><a href="#" onclick="showSection('reports')"><i class="fas fa-file-alt"></i> Reports & Exports</a></li>
                    </ul>
                </div>
                
                <div class="nav-section">
                    <div class="nav-title">System</div>
                    <ul class="nav-links">
                        <li><a href="#" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
                    </ul>
                </div>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="admin-main">
            <header class="admin-header">
                <div class="header-left">
                    <h1 id="page-title">Dashboard Overview</h1>
                </div>
                <div class="header-right">
                    <button class="btn btn-outline" onclick="adminDashboard.refreshData()">
                        <i class="fas fa-sync-alt"></i> Refresh Data
                    </button>
                    <div class="admin-info">
                        <div class="admin-avatar" id="admin-avatar">A</div>
                        <div class="admin-details">
                            <div class="admin-name" id="admin-name">Loading...</div>
                            <div class="admin-role">Administrator</div>
                        </div>
                    </div>
                </div>
            </header>

            <div class="content-area">
                <!-- Overview Section -->
                <section id="overview" class="content-section active">
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-header">
                                <div class="stat-icon">
                                    <i class="fas fa-users"></i>
                                </div>
                            </div>
                            <div class="stat-value" id="total-users">0</div>
                            <div class="stat-label">Total Users</div>
                            <div class="stat-trend trend-up">
                                <i class="fas fa-arrow-up"></i> <span id="user-growth">0%</span> from last month
                            </div>
                        </div>
                        
                        <div class="stat-card success">
                            <div class="stat-header">
                                <div class="stat-icon">
                                    <i class="fas fa-book"></i>
                                </div>
                            </div>
                            <div class="stat-value" id="total-courses">0</div>
                            <div class="stat-label">Active Courses</div>
                            <div class="stat-trend trend-up">
                                <i class="fas fa-arrow-up"></i> <span id="course-growth">0%</span> from last month
                            </div>
                        </div>
                        
                        <div class="stat-card warning">
                            <div class="stat-header">
                                <div class="stat-icon">
                                    <i class="fas fa-graduation-cap"></i>
                                </div>
                            </div>
                            <div class="stat-value" id="total-enrollments">0</div>
                            <div class="stat-label">Total Enrollments</div>
                            <div class="stat-trend trend-up">
                                <i class="fas fa-arrow-up"></i> <span id="enrollment-growth">0%</span> from last month
                            </div>
                        </div>
                        
                        <div class="stat-card accent">
                            <div class="stat-header">
                                <div class="stat-icon">
                                    <i class="fas fa-chart-line"></i>
                                </div>
                            </div>
                            <div class="stat-value" id="overall-average-score">0%</div>
                            <div class="stat-label">Overall Average Score</div>
                            <div class="stat-trend trend-up">
                                <i class="fas fa-arrow-up"></i> <span id="score-growth">0%</span> from last month
                            </div>
                        </div>
                    </div>

                    <div class="grid-2">
                        <div class="card">
                            <div class="card-header">
                                <h2><i class="fas fa-fire"></i> Top Performing Courses</h2>
                            </div>
                            <div class="card-body">
                                <div id="top-courses">
                                    <div class="loading">
                                        <i class="fas fa-spinner fa-spin"></i> Loading course data...
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="card">
                            <div class="card-header">
                                <h2><i class="fas fa-clock"></i> Recent Activity</h2>
                            </div>
                            <div class="card-body">
                                <div id="recent-activity">
                                    <div class="loading">
                                        <i class="fas fa-spinner fa-spin"></i> Loading recent activity...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Performance Analytics Section -->
                <section id="analytics" class="content-section">
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-value" id="overall-average-score-analytics">0%</div>
                            <div class="stat-label">Overall Average Score</div>
                        </div>
                        <div class="stat-card success">
                            <div class="stat-value" id="passing-rate">0%</div>
                            <div class="stat-label">Passing Rate (70%+)</div>
                        </div>
                        <div class="stat-card warning">
                            <div class="stat-value" id="struggling-students">0</div>
                            <div class="stat-label">Struggling Students (< 60%)</div>
                        </div>
                        <div class="stat-card accent">
                            <div class="stat-value" id="top-performers">0%</div>
                            <div class="stat-label">Top Performers (90%+)</div>
                        </div>
                    </div>

                    <div class="grid-2">
                        <div class="card">
                            <div class="card-header">
                                <h2><i class="fas fa-trophy"></i> Course Performance Ranking</h2>
                            </div>
                            <div class="card-body">
                                <div class="table-container">
                                    <table class="data-table">
                                        <thead>
                                            <tr>
                                                <th>Course</th>
                                                <th>Avg Score</th>
                                                <th>Students</th>
                                                <th>Performance</th>
                                            </tr>
                                        </thead>
                                        <tbody id="course-performance">
                                            <tr>
                                                <td colspan="4" class="loading">
                                                    <i class="fas fa-spinner fa-spin"></i> Loading performance data...
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        
                        <div class="card">
                            <div class="card-header">
                                <h2><i class="fas fa-chart-pie"></i> Grade Distribution</h2>
                            </div>
                            <div class="card-body">
                                <div id="grade-distribution">
                                    <div class="loading">
                                        <i class="fas fa-spinner fa-spin"></i> Loading grade data...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card">
                        <div class="card-header">
                            <h2><i class="fas fa-exclamation-triangle"></i> Students Needing Attention (< 60% Average)</h2>
                        </div>
                        <div class="card-body">
                            <div class="table-container">
                                <table class="data-table">
                                    <thead>
                                        <tr>
                                            <th>Student</th>
                                            <th>Email</th>
                                            <th>Avg Score</th>
                                            <th>Courses</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="struggling-students-list">
                                        <tr>
                                            <td colspan="5" class="loading">
                                                <i class="fas fa-spinner fa-spin"></i> Identifying struggling students...
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- User Management Section -->
                <section id="users" class="content-section">
                    <div class="card">
                        <div class="card-header">
                            <h2><i class="fas fa-users"></i> User Management</h2>
                            <div style="margin-top: 1rem;">
                                <input type="text" id="user-search" class="form-control" placeholder="Search users by email, name, or ID..." style="max-width: 300px;">
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="table-container">
                                <table class="data-table">
                                    <thead>
                                        <tr>
                                            <th>User</th>
                                            <th>Email</th>
                                            <th>Enrolled Courses</th>
                                            <th>Average Score</th>
                                            <th>Last Active</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="users-table-body">
                                        <tr>
                                            <td colspan="6" class="loading">
                                                <i class="fas fa-spinner fa-spin"></i> Loading users...
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Course Management Section -->
                <section id="courses" class="content-section">
                    <div class="card">
                        <div class="card-header">
                            <h2><i class="fas fa-book"></i> Course Management</h2>
                            <button class="btn btn-primary" onclick="showAddCourseModal()" style="margin-top: 1rem;">
                                <i class="fas fa-plus"></i> Add New Course
                            </button>
                        </div>
                        <div class="card-body">
                            <div class="table-container">
                                <table class="data-table">
                                    <thead>
                                        <tr>
                                            <th>Course</th>
                                            <th>Category</th>
                                            <th>Level</th>
                                            <th>Enrollments</th>
                                            <th>Avg Score</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="courses-table-body">
                                        <tr>
                                            <td colspan="7" class="loading">
                                                <i class="fas fa-spinner fa-spin"></i> Loading courses...
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Reports Section -->
                <section id="reports" class="content-section">
                    <div class="card">
                        <div class="card-header">
                            <h2><i class="fas fa-file-alt"></i> Reports & Exports</h2>
                        </div>
                        <div class="card-body">
                            <div class="grid-3">
                                <div class="card">
                                    <div class="card-body">
                                        <h3 style="margin-bottom: 1rem; color: var(--gray-800);">User Reports</h3>
                                        <p style="color: var(--gray-600); margin-bottom: 1.5rem;">Export comprehensive user data including performance metrics and enrollment history.</p>
                                        <button class="btn btn-primary" onclick="generateUserReport()">
                                            <i class="fas fa-download"></i> Export User Data
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="card">
                                    <div class="card-body">
                                        <h3 style="margin-bottom: 1rem; color: var(--gray-800);">Course Reports</h3>
                                        <p style="color: var(--gray-600); margin-bottom: 1.5rem;">Generate detailed course performance reports with student analytics.</p>
                                        <button class="btn btn-primary" onclick="generateCourseReport()">
                                            <i class="fas fa-download"></i> Export Course Data
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="card">
                                    <div class="card-body">
                                        <h3 style="margin-bottom: 1rem; color: var(--gray-800);">Performance Analytics</h3>
                                        <p style="color: var(--gray-600); margin-bottom: 1.5rem;">Download comprehensive performance analytics across all courses and users.</p>
                                        <button class="btn btn-primary" onclick="generatePerformanceReport()">
                                            <i class="fas fa-download"></i> Export Analytics
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </main>
    </div>

    <!-- Add Course Modal -->
    <div id="add-course-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; align-items: center; justify-content: center;">
        <div style="background: white; padding: 2rem; border-radius: var(--border-radius); width: 90%; max-width: 500px; box-shadow: var(--shadow-xl);">
            <h3 style="margin-bottom: 1.5rem; color: var(--gray-800);">Add New Course</h3>
            <form id="add-course-form">
                <div class="form-group">
                    <label for="course-title" class="form-label">Course Title</label>
                    <input type="text" id="course-title" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="course-description" class="form-label">Description</label>
                    <textarea id="course-description" class="form-control" rows="3" required></textarea>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="course-category" class="form-label">Category</label>
                        <select id="course-category" class="form-control" required>
                            <option value="">Select Category</option>
                            <option value="physics">Physics</option>
                            <option value="math">Math</option>
                            <option value="chemistry">Chemistry</option>
                            <option value="biology">Biology</option>
                            <option value="economics">Economics</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="course-level" class="form-label">Level</label>
                        <select id="course-level" class="form-control" required>
                            <option value="">Select Level</option>
                            <option value="grade-9">Grade 9</option>
                            <option value="grade-10">Grade 10</option>
                            <option value="grade-11">Grade 11</option>
                            <option value="grade-12">Grade 12</option>
                            <option value="ap">AP</option>
                            <option value="ap-c">AP-C</option>
                        </select>
                    </div>
                </div>
                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 1.5rem;">
                    <button type="button" class="btn btn-outline" onclick="hideAddCourseModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Course</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
        import { 
            getAuth, 
            onAuthStateChanged, 
            signOut 
        } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js";
        import { 
            getFirestore,
            collection,
            doc,
            getDocs,
            getDoc,
            addDoc,
            updateDoc,
            deleteDoc,
            query,
            where,
            orderBy,
            limit
        } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";

        const firebaseConfig = {
            apiKey: "AIzaSyDq9F28x6D4ivUJoT3ycHRlU_c-YNctFtE",
            authDomain: "email-notifications-1c77b.firebaseapp.com",
            projectId: "email-notifications-1c77b",
            storageBucket: "email-notifications-1c77b.firebasestorage.app",
            messagingSenderId: "272046681025",
            appId: "1:272046681025:web:e0aff95e41caa65c6d1d40",
            measurementId: "G-B3VJ7R5R8H"
        };

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // Make auth and db globally available
        window.auth = auth;
        window.db = db;
        window.getDocs = getDocs;
        window.getDoc = getDoc;
        window.addDoc = addDoc;
        window.updateDoc = updateDoc;
        window.deleteDoc = deleteDoc;
        window.collection = collection;
        window.doc = doc;
        window.query = query;
        window.where = where;
        window.orderBy = orderBy;
        window.limit = limit;
    </script>

    <script>
        class AdminDashboard {
            constructor() {
                this.currentUser = null;
                this.users = [];
                this.courses = [];
                this.enrollments = [];
                this.studentPerformances = [];
                this.init();
            }

            async init() {
                await this.checkAdminAccess();
                this.setupEventListeners();
                await this.loadDashboardData();
            }

            async checkAdminAccess() {
                return new Promise((resolve) => {
                    onAuthStateChanged(auth, async (user) => {
                        if (user) {
                            const isAdmin = await this.isUserAdmin(user.uid);
                            if (isAdmin) {
                                this.currentUser = user;
                                document.getElementById('admin-name').textContent = user.email;
                                document.getElementById('admin-avatar').textContent = user.email.charAt(0).toUpperCase();
                                resolve(true);
                            } else {
                                window.location.href = 'premium-admin-login.html';
                            }
                        } else {
                            window.location.href = 'premium-admin-login.html';
                        }
                    });
                });
            }

            async isUserAdmin(userId) {
                try {
                    const adminDoc = await getDoc(doc(db, "admins", userId));
                    return adminDoc.exists();
                } catch (error) {
                    console.error('Error checking admin status:', error);
                    return false;
                }
            }

            setupEventListeners() {
                // User search
                document.getElementById('user-search').addEventListener('input', (e) => {
                    this.filterUsers(e.target.value);
                });

                // Add course form
                document.getElementById('add-course-form').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.addNewCourse();
                });
            }

            async loadDashboardData() {
                try {
                    await Promise.all([
                        this.loadUsers(),
                        this.loadCourses(),
                        this.loadEnrollments(),
                        this.loadPerformanceAnalytics()
                    ]);
                    
                    this.updateOverview();
                    this.updatePerformanceMetrics();
                    this.displayUsers();
                    this.displayCourses();
                    this.displayTopCourses();
                    this.displayRecentActivity();
                    
                } catch (error) {
                    console.error('Error loading dashboard data:', error);
                }
            }

            async loadUsers() {
                try {
                    const usersSnapshot = await getDocs(collection(db, "users"));
                    this.users = [];
                    
                    for (const userDoc of usersSnapshot.docs) {
                        const userData = userDoc.data();
                        const enrolledCourses = await this.getUserEnrollments(userDoc.id);
                        const userPerformance = await this.calculateUserPerformance(userDoc.id, enrolledCourses);
                        
                        this.users.push({
                            id: userDoc.id,
                            ...userData,
                            enrolledCount: enrolledCourses.length,
                            averageScore: userPerformance.averageScore,
                            lastActive: userData.lastUpdated || userData.createdAt
                        });
                    }
                    
                } catch (error) {
                    console.error('Error loading users:', error);
                }
            }

            async loadCourses() {
                try {
                    const coursesSnapshot = await getDocs(collection(db, "courses"));
                    this.courses = [];
                    
                    for (const courseDoc of coursesSnapshot.docs) {
                        const courseData = courseDoc.data();
                        const courseStats = await this.getCourseStatistics(courseDoc.id);
                        
                        this.courses.push({
                            id: courseDoc.id,
                            ...courseData,
                            ...courseStats
                        });
                    }
                    
                } catch (error) {
                    console.error('Error loading courses:', error);
                }
            }

            async loadEnrollments() {
                try {
                    const usersSnapshot = await getDocs(collection(db, "users"));
                    this.enrollments = [];
                    
                    for (const userDoc of usersSnapshot.docs) {
                        const userEnrollments = await getDocs(
                            collection(db, "users", userDoc.id, "enrolledCourses")
                        );
                        
                        userEnrollments.docs.forEach(enrollmentDoc => {
                            this.enrollments.push({
                                userId: userDoc.id,
                                courseId: enrollmentDoc.id,
                                ...enrollmentDoc.data()
                            });
                        });
                    }
                } catch (error) {
                    console.error('Error loading enrollments:', error);
                }
            }

            async loadPerformanceAnalytics() {
                this.studentPerformances = [];
                
                for (const user of this.users) {
                    if (user.averageScore > 0) {
                        this.studentPerformances.push({
                            userId: user.id,
                            email: user.email,
                            displayName: user.displayName,
                            averageScore: user.averageScore,
                            enrolledCount: user.enrolledCount
                        });
                    }
                }
            }

            async getUserEnrollments(userId) {
                try {
                    const enrollmentsSnapshot = await getDocs(
                        collection(db, "users", userId, "enrolledCourses")
                    );
                    return enrollmentsSnapshot.docs.map(doc => doc.data());
                } catch (error) {
                    return [];
                }
            }

            async calculateUserPerformance(userId, enrollments) {
                let totalScore = 0;
                let scoreCount = 0;
                
                for (const enrollment of enrollments) {
                    if (enrollment.averageScore) {
                        totalScore += enrollment.averageScore;
                        scoreCount++;
                    }
                }
                
                return {
                    averageScore: scoreCount > 0 ? Math.round(totalScore / scoreCount) : 0,
                    coursesWithScores: scoreCount
                };
            }

            async getCourseStatistics(courseId) {
                let totalScore = 0;
                let scoreCount = 0;
                let enrollmentCount = 0;
                
                for (const enrollment of this.enrollments) {
                    if (enrollment.courseId === courseId) {
                        enrollmentCount++;
                        if (enrollment.averageScore) {
                            totalScore += enrollment.averageScore;
                            scoreCount++;
                        }
                    }
                }
                
                return {
                    enrollmentCount: enrollmentCount,
                    averageScore: scoreCount > 0 ? Math.round(totalScore / scoreCount) : 0,
                    studentsWithScores: scoreCount
                };
            }

            updateOverview() {
                // Update main stats
                document.getElementById('total-users').textContent = this.users.length;
                document.getElementById('total-courses').textContent = this.courses.length;
                document.getElementById('total-enrollments').textContent = this.enrollments.length;
                
                // Calculate overall average score
                const totalScores = this.studentPerformances.reduce((sum, student) => sum + student.averageScore, 0);
                const overallAverage = this.studentPerformances.length > 0 ? 
                    Math.round(totalScores / this.studentPerformances.length) : 0;
                document.getElementById('overall-average-score').textContent = overallAverage + '%';
                
                // Update growth indicators (simulated for demo)
                document.getElementById('user-growth').textContent = '12%';
                document.getElementById('course-growth').textContent = '5%';
                document.getElementById('enrollment-growth').textContent = '8%';
                document.getElementById('score-growth').textContent = '3%';
            }

            updatePerformanceMetrics() {
                const overallAverage = this.calculateOverallAverage();
                document.getElementById('overall-average-score-analytics').textContent = overallAverage + '%';
                
                // Calculate passing rate (70%+)
                const passingStudents = this.studentPerformances.filter(s => s.averageScore >= 70).length;
                const passingRate = this.studentPerformances.length > 0 ?
                    Math.round((passingStudents / this.studentPerformances.length) * 100) : 0;
                document.getElementById('passing-rate').textContent = passingRate + '%';
                
                // Struggling students (< 60%)
                const strugglingStudents = this.studentPerformances.filter(s => s.averageScore < 60).length;
                document.getElementById('struggling-students').textContent = strugglingStudents;
                
                // Top performers (90%+)
                const topPerformers = this.studentPerformances.filter(s => s.averageScore >= 90).length;
                const topPerformerRate = this.studentPerformances.length > 0 ?
                    Math.round((topPerformers / this.studentPerformances.length) * 100) : 0;
                document.getElementById('top-performers').textContent = topPerformerRate + '%';
                
                // Update course performance table
                this.updateCoursePerformanceTable();
                
                // Update grade distribution
                this.updateGradeDistribution();
                
                // Update struggling students list
                this.updateStrugglingStudentsList();
            }

            calculateOverallAverage() {
                if (this.studentPerformances.length === 0) return 0;
                const total = this.studentPerformances.reduce((sum, student) => sum + student.averageScore, 0);
                return Math.round(total / this.studentPerformances.length);
            }

            displayUsers() {
                const tbody = document.getElementById('users-table-body');
                tbody.innerHTML = '';
                
                this.users.forEach(user => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>
                            <div style="font-weight: 600; color: var(--gray-900);">${user.displayName || 'Unknown User'}</div>
                            <div style="font-size: 0.75rem; color: var(--gray-500);">${user.id.substring(0, 8)}...</div>
                        </td>
                        <td>${user.email || 'N/A'}</td>
                        <td>${user.enrolledCount}</td>
                        <td>
                            <span style="font-weight: 700; color: ${user.averageScore >= 70 ? 'var(--success)' : user.averageScore >= 60 ? 'var(--warning)' : 'var(--accent)'}">
                                ${user.averageScore}%
                            </span>
                        </td>
                        <td>${this.formatDate(user.lastActive)}</td>
                        <td>
                            <button class="btn btn-outline btn-sm" onclick="adminDashboard.viewUser('${user.id}')">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="adminDashboard.deleteUser('${user.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            }

            displayCourses() {
                const tbody = document.getElementById('courses-table-body');
                tbody.innerHTML = '';
                
                this.courses.forEach(course => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>
                            <div style="font-weight: 600; color: var(--gray-900);">${course.title}</div>
                            <div style="font-size: 0.75rem; color: var(--gray-500);">${course.id}</div>
                        </td>
                        <td>${course.category}</td>
                        <td>${course.level}</td>
                        <td>${course.enrollmentCount}</td>
                        <td>
                            <span style="font-weight: 700; color: ${course.averageScore >= 70 ? 'var(--success)' : course.averageScore >= 60 ? 'var(--warning)' : 'var(--accent)'}">
                                ${course.averageScore}%
                            </span>
                        </td>
                        <td>
                            <span class="badge ${course.isActive ? 'badge-success' : 'badge-accent'}">
                                ${course.isActive ? 'Active' : 'Inactive'}
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-outline btn-sm" onclick="adminDashboard.editCourse('${course.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="adminDashboard.deleteCourse('${course.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            }

            displayTopCourses() {
                const container = document.getElementById('top-courses');
                const topCourses = [...this.courses]
                    .filter(course => course.averageScore > 0)
                    .sort((a, b) => b.averageScore - a.averageScore)
                    .slice(0, 5);
                
                if (topCourses.length === 0) {
                    container.innerHTML = '<div style="text-align: center; color: var(--gray-500);">No course data available</div>';
                    return;
                }
                
                let html = '<div style="display: flex; flex-direction: column; gap: 1rem;">';
                topCourses.forEach((course, index) => {
                    html += `
                        <div style="display: flex; justify-content: between; align-items: center; padding: 1rem; background: var(--gray-50); border-radius: var(--border-radius-sm);">
                            <div style="flex: 1;">
                                <div style="font-weight: 600; color: var(--gray-900);">${course.title}</div>
                                <div style="font-size: 0.875rem; color: var(--gray-600);">${course.category} • ${course.level}</div>
                            </div>
                            <div style="text-align: right;">
                                <div style="font-size: 1.25rem; font-weight: 700; color: var(--success);">${course.averageScore}%</div>
                                <div style="font-size: 0.75rem; color: var(--gray-500);">${course.enrollmentCount} students</div>
                            </div>
                        </div>
                    `;
                });
                html += '</div>';
                container.innerHTML = html;
            }

            displayRecentActivity() {
                const container = document.getElementById('recent-activity');
                // Simulate recent activity
                const activities = [
                    { action: 'New user registration', user: 'john@example.com', time: '2 minutes ago' },
                    { action: 'Course enrollment', user: 'sarah@example.com', course: 'AP Physics 1', time: '15 minutes ago' },
                    { action: 'Quiz completed', user: 'mike@example.com', course: 'Algebra 2', score: '85%', time: '1 hour ago' },
                    { action: 'Course completed', user: 'emma@example.com', course: 'Chemistry Grade 10', time: '3 hours ago' }
                ];
                
                let html = '<div style="display: flex; flex-direction: column; gap: 1rem;">';
                activities.forEach(activity => {
                    html += `
                        <div style="display: flex; align-items: start; gap: 1rem; padding: 1rem; background: var(--gray-50); border-radius: var(--border-radius-sm);">
                            <div style="width: 8px; height: 8px; background: var(--primary); border-radius: 50%; margin-top: 0.5rem;"></div>
                            <div style="flex: 1;">
                                <div style="font-weight: 600; color: var(--gray-900);">${activity.action}</div>
                                <div style="font-size: 0.875rem; color: var(--gray-600);">
                                    ${activity.user}${activity.course ? ` • ${activity.course}` : ''}${activity.score ? ` • Score: ${activity.score}` : ''}
                                </div>
                            </div>
                            <div style="font-size: 0.75rem; color: var(--gray-500);">${activity.time}</div>
                        </div>
                    `;
                });
                html += '</div>';
                container.innerHTML = html;
            }

            updateCoursePerformanceTable() {
                const tbody = document.getElementById('course-performance');
                const coursesWithScores = this.courses.filter(course => course.averageScore > 0)
                    .sort((a, b) => b.averageScore - a.averageScore);
                
                if (coursesWithScores.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="4" style="text-align: center; color: var(--gray-500);">No performance data available</td></tr>';
                    return;
                }
                
                tbody.innerHTML = '';
                coursesWithScores.forEach(course => {
                    const performanceLevel = course.averageScore >= 80 ? 'Excellent' : 
                                           course.averageScore >= 70 ? 'Good' : 
                                           course.averageScore >= 60 ? 'Fair' : 'Needs Improvement';
                    
                    const badgeClass = course.averageScore >= 80 ? 'badge-success' : 
                                      course.averageScore >= 70 ? 'badge-warning' : 'badge-accent';
                    
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${course.title}</td>
                        <td><strong>${course.averageScore}%</strong></td>
                        <td>${course.enrollmentCount}</td>
                        <td><span class="badge ${badgeClass}">${performanceLevel}</span></td>
                    `;
                    tbody.appendChild(row);
                });
            }

            updateGradeDistribution() {
                const container = document.getElementById('grade-distribution');
                
                const gradeRanges = {
                    'A (90-100%)': 0,
                    'B (80-89%)': 0,
                    'C (70-79%)': 0,
                    'D (60-69%)': 0,
                    'F (< 60%)': 0
                };

                this.studentPerformances.forEach(student => {
                    if (student.averageScore >= 90) gradeRanges['A (90-100%)']++;
                    else if (student.averageScore >= 80) gradeRanges['B (80-89%)']++;
                    else if (student.averageScore >= 70) gradeRanges['C (70-79%)']++;
                    else if (student.averageScore >= 60) gradeRanges['D (60-69%)']++;
                    else gradeRanges['F (< 60%)']++;
                });

                let html = '<div style="display: flex; flex-direction: column; gap: 10px;">';
                Object.entries(gradeRanges).forEach(([grade, count]) => {
                    const percentage = this.studentPerformances.length > 0 ? 
                        Math.round((count / this.studentPerformances.length) * 100) : 0;
                    
                    html += `
                        <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px; background: var(--gray-50); border-radius: 8px;">
                            <span style="font-weight: 500;">${grade}</span>
                            <div style="text-align: right;">
                                <div style="font-weight: 600;">${count} students</div>
                                <div style="font-size: 0.875rem; color: var(--gray-500);">${percentage}%</div>
                            </div>
                        </div>
                    `;
                });
                html += '</div>';

                container.innerHTML = html;
            }

            updateStrugglingStudentsList() {
                const tbody = document.getElementById('struggling-students-list');
                const strugglingStudents = this.studentPerformances
                    .filter(s => s.averageScore < 60)
                    .sort((a, b) => a.averageScore - b.averageScore);

                if (strugglingStudents.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="5" style="text-align: center; color: var(--success);"><i class="fas fa-check-circle"></i> No struggling students found!</td></tr>';
                    return;
                }

                tbody.innerHTML = '';
                strugglingStudents.forEach(student => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${student.displayName || 'Unknown User'}</td>
                        <td>${student.email}</td>
                        <td><strong style="color: var(--accent);">${student.averageScore}%</strong></td>
                        <td>${student.enrolledCount} courses</td>
                        <td>
                            <button class="btn btn-outline btn-sm" onclick="adminDashboard.contactStudent('${student.userId}', '${student.email}')">
                                <i class="fas fa-envelope"></i> Contact
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            }

            filterUsers(searchTerm) {
                const filteredUsers = this.users.filter(user => 
                    user.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    user.displayName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    user.id.toLowerCase().includes(searchTerm.toLowerCase())
                );
                
                const tbody = document.getElementById('users-table-body');
                tbody.innerHTML = '';
                
                filteredUsers.forEach(user => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>
                            <div style="font-weight: 600; color: var(--gray-900);">${user.displayName || 'Unknown User'}</div>
                            <div style="font-size: 0.75rem; color: var(--gray-500);">${user.id.substring(0, 8)}...</div>
                        </td>
                        <td>${user.email || 'N/A'}</td>
                        <td>${user.enrolledCount}</td>
                        <td>
                            <span style="font-weight: 700; color: ${user.averageScore >= 70 ? 'var(--success)' : user.averageScore >= 60 ? 'var(--warning)' : 'var(--accent)'}">
                                ${user.averageScore}%
                            </span>
                        </td>
                        <td>${this.formatDate(user.lastActive)}</td>
                        <td>
                            <button class="btn btn-outline btn-sm" onclick="adminDashboard.viewUser('${user.id}')">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="adminDashboard.deleteUser('${user.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            }

            async addNewCourse() {
                const title = document.getElementById('course-title').value;
                const description = document.getElementById('course-description').value;
                const category = document.getElementById('course-category').value;
                const level = document.getElementById('course-level').value;

                try {
                    const courseId = title.toLowerCase().replace(/[^a-z0-9]/g, '-');
                    
                    await addDoc(collection(db, "courses"), {
                        title: title,
                        description: description,
                        category: category,
                        level: level,
                        isActive: true,
                        createdAt: new Date().toISOString()
                    });

                    alert('Course added successfully!');
                    this.hideAddCourseModal();
                    await this.loadDashboardData();
                } catch (error) {
                    console.error('Error adding course:', error);
                    alert('Error adding course: ' + error.message);
                }
            }

            async deleteUser(userId) {
                if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
                    try {
                        await deleteDoc(doc(db, "users", userId));
                        alert('User deleted successfully!');
                        await this.loadDashboardData();
                    } catch (error) {
                        console.error('Error deleting user:', error);
                        alert('Error deleting user: ' + error.message);
                    }
                }
            }

            async deleteCourse(courseId) {
                if (confirm('Are you sure you want to delete this course? This will remove it from the system.')) {
                    try {
                        await deleteDoc(doc(db, "courses", courseId));
                        alert('Course deleted successfully!');
                        await this.loadDashboardData();
                    } catch (error) {
                        console.error('Error deleting course:', error);
                        alert('Error deleting course: ' + error.message);
                    }
                }
            }

            viewUser(userId) {
                const user = this.users.find(u => u.id === userId);
                if (user) {
                    alert(`User Details:\n\nID: ${user.id}\nEmail: ${user.email}\nDisplay Name: ${user.displayName || 'N/A'}\nEnrolled Courses: ${user.enrolledCount}\nAverage Score: ${user.averageScore}%\nLast Active: ${this.formatDate(user.lastActive)}`);
                }
            }

            editCourse(courseId) {
                const course = this.courses.find(c => c.id === courseId);
                if (course) {
                    alert(`Edit Course: ${course.title}\n\nThis feature would open a course editor in a real implementation.`);
                }
            }

            contactStudent(userId, email) {
                alert(`Contact student: ${email}\n\nThis would open an email client or messaging system to reach out to struggling students.`);
            }

            formatDate(dateString) {
                if (!dateString) return 'Never';
                const date = new Date(dateString);
                return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
            }

            hideAddCourseModal() {
                document.getElementById('add-course-modal').style.display = 'none';
                document.getElementById('add-course-form').reset();
            }

            async refreshData() {
                await this.loadDashboardData();
                alert('Data refreshed successfully!');
            }
        }

        // Global functions
        function showSection(sectionName) {
            // Hide all sections
            document.querySelectorAll('.content-section').forEach(section => {
                section.style.display = 'none';
            });
            
            // Remove active class from all nav items
            document.querySelectorAll('.nav-links a').forEach(link => {
                link.classList.remove('active');
            });
            
            // Show selected section
            document.getElementById(sectionName).style.display = 'block';
            
            // Add active class to clicked nav item
            event.target.classList.add('active');
            
            // Update page title
            const titles = {
                'overview': 'Dashboard Overview',
                'analytics': 'Performance Analytics',
                'users': 'User Management',
                'courses': 'Course Management',
                'reports': 'Reports & Exports'
            };
            document.getElementById('page-title').textContent = titles[sectionName];
        }

        function showAddCourseModal() {
            document.getElementById('add-course-modal').style.display = 'flex';
        }

        function hideAddCourseModal() {
            document.getElementById('add-course-modal').style.display = 'none';
        }

        function generateUserReport() {
            alert('User report generation would start here. This would generate a comprehensive CSV report with all user data and performance metrics.');
        }

        function generateCourseReport() {
            alert('Course report generation would start here. This would generate a detailed PDF report with course analytics and student performance data.');
        }

        function generatePerformanceReport() {
            alert('Performance analytics report generation would start here. This would create an Excel file with comprehensive performance data across all metrics.');
        }

        async function logout() {
            if (confirm('Are you sure you want to log out?')) {
                try {
                    await signOut(auth);
                    window.location.href = 'premium-admin-login.html';
                } catch (error) {
                    console.error('Logout error:', error);
                }
            }
        }

        // Initialize admin dashboard
        let adminDashboard;
        document.addEventListener('DOMContentLoaded', () => {
            adminDashboard = new AdminDashboard();
        });
    </script>
</body>
</html>
